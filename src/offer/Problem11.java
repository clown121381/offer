package offer;

import java.util.Stack;

/**
 * 
 * 出栈顺序判断
 * 输入两个整数序列，第一个序列表示栈的压入顺序，
 * 请判断第二个序列是否可能为该栈的弹出顺序。
 * 假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，
 * 序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
 * 
 * 
 * 1,2,3,4,5
 * 
 * 出栈序列：2,1,4,3,5
 * @author 爱不会绝迹
 *
 */
public class Problem11 {
	public static boolean IsPopOrder(int [] pushA,int [] popA) {
		if(pushA==null || popA==null){
			return false;
		}
		Stack<Integer> s = new Stack<>();
		for(int i=0,index = 0;i < pushA.length;i ++){
			s.push(pushA[i]);
			while(!s.isEmpty() && s.peek()==popA[index]){
				s.pop();
				index++;
			}
		}
		return s.isEmpty();
    }
	
	public static void main(String[] args) {
		int[] pushA = {1,2,3,4,5};
		int[] popA = {2,1,3,4,5};
		System.out.println(IsPopOrder(pushA,popA));
	}
}







